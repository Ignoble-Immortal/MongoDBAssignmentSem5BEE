SD Assignment-1

-----------------------

Ans 1.

(a). 	CREATE TABLE Books (
    	BookID INT PRIMARY KEY,
    	Title VARCHAR(100),
    	Author VARCHAR(50),
    	PublishedYear INT
	);

(b). 	ALTER TABLE Books
	ADD ISBN VARCHAR(13);

(c). 	ALTER TABLE Books
	DROP COLUMN PublishedYear;

-----------------------

Ans 2.

(a).	SELECT Name
	FROM Students
	WHERE Age > 15;

(b).	INSERT INTO Students (StudentID, Name, Age, Grade)
	VALUES (104, 'Tom Brown', 15, 'C');

(c).	UPDATE Students
	SET Grade = 'A+'
	WHERE Name = 'Jane Doe';

(d).	DELETE FROM Students
	WHERE Grade = 'C';

-----------------------

Ans 3.

(a).	GRANT SELECT, INSERT ON Books TO User2;

(b).	REVOKE INSERT ON Books FROM User2;

-----------------------

Ans 4.

(a).	BEGIN TRANSACTION;

(b). 	INSERT INTO Orders (OrderID, ProductID, Quantity)
	VALUES (201, 105, 2);

(c). 	UPDATE Inventory
	SET Quantity = Quantity - 2
	WHERE ProductID = 105;

(d). 	IF @@ERROR != 0
    		ROLLBACK;
	ELSE
    		COMMIT;
	END

-----------------------

Ans 5.

(a).	CREATE TABLE Customers (
    	CustomerID INT PRIMARY KEY,
    	Name VARCHAR(50),
    	Email VARCHAR(50),
    	Phone VARCHAR(15)
	);

(b).	INSERT INTO Customers (CustomerID, Name, Email, Phone)
	VALUES (201, 'Emily Clark', 'emily@example.com', '1234567890');

(c).	GRANT SELECT ON Customers TO AdminUser;

(d).	BEGIN TRANSACTION;
	INSERT INTO Customers (CustomerID, Name, Email, Phone)
	VALUES (202, 'asdasd', 'asdasd@example.com', '1231231231');
	ROLLBACK;

-----------------------

And 6.

(a).	CREATE TABLE Employees (
    	EmployeeID INT PRIMARY KEY,
    	Name VARCHAR(50),
    	Department VARCHAR(30),
    	Salary INT
	);

(b).	ALTER TABLE Employees
	RENAME COLUMN Department TO Dept;

(c).	ALTER TABLE Employees
	ADD JoiningDate DATE DEFAULT '2024-01-01';

(d).	ALTER TABLE Employees
	DROP COLUMN Salary;

(e).	CREATE TABLE Departments (
    	DeptID INT PRIMARY KEY,
    	DeptName VARCHAR(30) UNIQUE
	);
	ALTER TABLE Employees
	ADD DeptID INT,
	ADD CONSTRAINT FK_Dept FOREIGN KEY (DeptID) REFERENCES Departments(DeptID);

-----------------------

Ans 7.

(a).	INSERT INTO Employees (EmployeeID, Name, Department, Salary)
	VALUES (1, 'Alice', 'HR', 50000);

(b).	SELECT * 
	FROM Employees
	WHERE Department = 'HR';

(c).	UPDATE Employees
	SET Salary = Salary * 1.1
	WHERE Department = 'IT';

(d).	DELETE FROM Employees
	WHERE Salary < 40000;

(e).	MERGE INTO Employees AS Target
	USING (VALUES(1,'Alice','HR',55000)) AS Source (EmployeeID,Name,Department,Salary)
	ON Target.EmployeeID = Source.EmployeeID
	WHEN MATCHED THEN
    	UPDATE SET Salary = Source.Salary
	WHEN NOT MATCHED THEN
    	INSERT (EmployeeID, Name, Department, Salary)
   	VALUES (Source.EmployeeID, Source.Name, Source.Department, Source.Salary);

-----------------------

Ans 8.

(a).	GRANT SELECT, UPDATE ON Employees TO HRManager;

(b).	REVOKE UPDATE ON Employees FROM HRManager;

(c).	CREATE ROLE DataViewer;
	GRANT SELECT ON ALL TABLES TO DataViewer;

(d).	GRANT DataViewer TO Viewer1;

(e).	REVOKE ALL PRIVILEGES ON ALL TABLES FROM InternUser;

-----------------------

Ans 9.

(a).	BEGIN TRANSACTION;
	INSERT INTO Departments (DeptID, DeptName)
	VALUES (1, 'Finance');

(b).	COMMIT;

(c).	BEGIN TRANSACTION;
	INSERT INTO Departments (DeptID, DeptName)
	VALUES (2, 'IT');
	IF @@ERROR != 0
    		ROLLBACK;
	ELSE
    		COMMIT;

(d).	BEGIN TRANSACTION;
	SAVEPOINT BeforeInsert;
	INSERT INTO Employees (EmployeeID, Name, Department, Salary)
	VALUES (2, 'Bob', 'Finance', 45000);
	IF @@ERROR != 0
    		ROLLBACK TO BeforeInsert;
	COMMIT;

-----------------------

Ans 10.

(a).	CREATE TABLE Projects (
    	ProjectID INT PRIMARY KEY,
    	ProjectName VARCHAR(50),
    	EmployeeID INT,
    	FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
	);

(b).	INSERT INTO Projects (ProjectID, ProjectName, EmployeeID)
	VALUES (101, 'Website Upgrade', 1);

(c).	BEGIN TRANSACTION;
	INSERT INTO Projects (ProjectID, ProjectName, EmployeeID)
	VALUES (102, 'Mobile App Development', 2);
	IF @@ERROR != 0
    		ROLLBACK;
	ELSE
   		COMMIT;